// This file, condition_handler.js, requires some explanation.

// This is my attempt to abstract and to understand what all was
// really going on with the 'scroll' event and the update_positions()
// function.  There seemed to be some inherent mismatch between the
// two.  The scroll event is instantaneous but update_positions()
// needed to continue looping (recursively) as long a condition, say
// 'scrolling', was true.

// The actual update_positions() code and addEventListener() call were
// both fairly simple.  But I didn't want a single scroll event to
// trigger an infinite update_positions() loop.  Neither did I want
// each event to trigger a single update_positions() call.

// What I wanted was for a scroll event to raise a 'scrolling' flag
// and to start the update_positions() loop, which would continue only
// as long as the 'scrolling' flag was true. So far, so good.

// The next question was when to falsify the scrolling flag.  I
// settled on something like "no scroll events received in the last
// 100 ms".  So I needed a setTimeout call to handle this.  And each
// new scroll event had to cancel any existing timeout and start a new
// one, effectively resetting the 100 ms 'no event received' timer.

// This all became very confusing to me, and greatly complicated the
// relatively simple update_positions() and addEventListener()
// code. So I thought, why not take the gnarly bits out and deal with
// them in isolation.  So here we go ...

// First of all, this has nothing in particular to do with scrolling
// or sliding pizza backgrounds.  In the abstract, it has to do with

//   - events
//   - conditions: event received in last dt ms
//   - a function run in a loop.

// This may also have nothing in particular to do with requestAnimationFrame()
// which plays a sort of curious role here, being composed with foo()
// in the recursive call in looper().  What is such a function in general?
// I'm not sure how to think of it.  We could of course abstract it out as
// well, but I've left it in here.

// The result then is the following:
